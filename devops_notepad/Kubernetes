pre-requ for Kubernetes:

Recommended : host only network and have a static IP 

no swap space should be there 

docker -->alternatives---> lxe, CRI, etc..


Kube.api server ----> api controller.( REST API)


kubelet agent is the main which give info to manager acts as vpxd and hostd.

calculate resource & HA for running containers.

container network plugin 

role based access control is not there for that we have to install plugin 

and namespace as well

overlay network is SDN 

etcd service is responsible for storing the access crendentials ( including conatiner authentication )
-----

kubernetes can run containers on windows azure and AWS within same cluster.

docker swarm for only small projects.. its has drawbacks

min 3 master machine required to run a full PROD 

kubelet(agent) is master to master sync..

when multimaster is there in PROD we have to create network layer on overlay network to join all node is one node..


after centos:


service docker start 


https://github.com/gopal1409/socgenjanend

3 node architecture using centos

https://linuxize.com/post/how-to-remove-docker-images-containers-volumes-and-networks/

https://www.edureka.co/blog/install-kubernetes-on-ubuntu
https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/ 


kubeadm init --apiserver-advertise-address=<192.168.56.101> --pod-network-cidr=192.168.0.0/16


deployment set is the combination of replica set and pods


we can create multiple yaml page for deloying containers

kubectl create -f pod.yml --validate=false

kubectl create namespace quota-mem-cpu-example
kubectl create ns quota-mem-cpu-example
vi limits.yaml


[root@ip-172-31-8-5 ~]# history
    1  yum install -y yum-utils   device-mapper-persistent-data   lvm2
    2   yum-config-manager     --add-repo     https://download.docker.com/linux/centos/docker-ce.repo
    3  yum install docker-ce docker-ce-cli containerd.io
    4  service docker start
    5  chkconfig docker on
    6  cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF

    7  setenforce 0
    8  sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
    9  yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
   10  systemctl enable --now kubelet
   11  cat <<EOF > /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF

   12  sysctl --system
   13  systemctl daemon-reload
   14  systemctl restart kubelet
   15  history
   
   
   hostctl
   only if you have it in AWS or someother cloud plaftform :  reserve hostname: true